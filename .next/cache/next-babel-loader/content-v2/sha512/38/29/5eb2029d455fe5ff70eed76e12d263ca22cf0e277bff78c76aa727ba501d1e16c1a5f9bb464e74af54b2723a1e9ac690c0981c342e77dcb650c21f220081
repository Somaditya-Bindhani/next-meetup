{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Documents\\\\Web developemnt\\\\news-next-project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport MeetupDeatils from \"../../components/meetups/MeetupDeatils\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nconst MeetupDetailPage = props => {\n  const router = useRouter();\n  const id = router.query.meetupId;\n  return /*#__PURE__*/_jsxDEV(MeetupDeatils, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(\"mongodb+srv://somadityaUser:qwerty123@cluster0.dlg8e.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n};\nexport const getStaticProps = async context => {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://somadityaUser:qwerty123@cluster0.dlg8e.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  console.log(selectedMeetup);\n  return {\n    props: {\n      meetupData: {\n        id: se\n      }\n    },\n    revalidate: 1\n  };\n};\nexport default MeetupDetailPage;","map":{"version":3,"sources":["D:/Documents/Web developemnt/news-next-project/pages/[meetupId]/index.js"],"names":["React","useRouter","MeetupDeatils","MongoClient","ObjectId","MeetupDetailPage","props","router","id","query","meetupId","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","fallback","paths","map","meetup","params","toString","getStaticProps","context","selectedMeetup","findOne","console","log","se","revalidate"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,aAAP,MAA0B,wCAA1B;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;;AACA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAClC,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,QAAMO,EAAE,GAAGD,MAAM,CAACE,KAAP,CAAaC,QAAxB;AACA,sBACE,QAAC,aAAD;AACE,IAAA,KAAK,EAAEJ,KAAK,CAACK,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEN,KAAK,CAACK,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEP,KAAK,CAACK,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAER,KAAK,CAACK,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAXD;;AAYA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,QAAMC,MAAM,GAAG,MAAMd,WAAW,CAACe,OAAZ,CACnB,sGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEpB,QAAAA,QAAQ,EAAEmB,MAAM,CAACL,GAAP,CAAWO,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD,CAbM;AAcP,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC/C,QAAMvB,QAAQ,GAAGuB,OAAO,CAACH,MAAR,CAAepB,QAAhC;AACA,QAAMO,MAAM,GAAG,MAAMd,WAAW,CAACe,OAAZ,CACnB,sGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMa,cAAc,GAAG,MAAMd,iBAAiB,CAACe,OAAlB,CAA0B;AACrDX,IAAAA,GAAG,EAAEpB,QAAQ,CAACM,QAAD;AADwC,GAA1B,CAA7B;AAGA0B,EAAAA,OAAO,CAACC,GAAR,CAAYH,cAAZ;AACA,SAAO;AACL5B,IAAAA,KAAK,EAAE;AACLK,MAAAA,UAAU,EAAE;AACVH,QAAAA,EAAE,EAAG8B;AADK;AADP,KADF;AAMLC,IAAAA,UAAU,EAAE;AANP,GAAP;AAQD,CAnBM;AAqBP,eAAelC,gBAAf","sourcesContent":["import React from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport MeetupDeatils from \"../../components/meetups/MeetupDeatils\";\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\nconst MeetupDetailPage = (props) => {\r\n  const router = useRouter();\r\n  const id = router.query.meetupId;\r\n  return (\r\n    <MeetupDeatils\r\n      image={props.meetupData.image}\r\n      title={props.meetupData.title}\r\n      address={props.meetupData.address}\r\n      description={props.meetupData.description}\r\n    />\r\n  );\r\n};\r\nexport const getStaticPaths = async () => {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://somadityaUser:qwerty123@cluster0.dlg8e.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n  return {\r\n    fallback: false,\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n  };\r\n};\r\nexport const getStaticProps = async (context) => {\r\n  const meetupId = context.params.meetupId;\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://somadityaUser:qwerty123@cluster0.dlg8e.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const selectedMeetup = await meetupsCollection.findOne({\r\n    _id: ObjectId(meetupId),\r\n  });\r\n  console.log(selectedMeetup);\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        id : se\r\n      },\r\n    },\r\n    revalidate: 1,\r\n  };\r\n};\r\n\r\nexport default MeetupDetailPage;\r\n"]},"metadata":{},"sourceType":"module"}